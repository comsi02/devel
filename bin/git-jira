# -*- coding:utf-8 -*-
import subprocess
import json
import sys
import os
import pycurl
import cStringIO
import urllib2

# https://www.joinc.co.kr/w/man/12/jira
# pip install
# sudo env ARCHFLAGS="-arch x86_64" easy_install setuptools pycurl==7.19.0

class bcolors:
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    PURPLE = '\033[35m'
    SKYBLUE = '\033[36m'
    GREY = '\033[37m'
    WHITE = '\033[38m'

    COLOR_HASH = {
        'endc':ENDC,
        'underline':UNDERLINE,
        'bold':BOLD,
        'red':RED,
        'green':GREEN,
        'yellow':YELLOW,
        'blue':BLUE,
        'purple':PURPLE,
        'skyblue':SKYBLUE,
        'grey':GREY,
        'white':WHITE,
        'orange':SKYBLUE,
        'fail':RED,
        'warning':YELLOW,
        'normal':WHITE,
    }

    @staticmethod
    def set_ansi_color(string, color=None):
        return bcolors.COLOR_HASH.get(color,bcolors.WHITE) + string + bcolors.ENDC

def get_jira_issue(branch_key):

    try:
        branch_key.index('-')

        jira_url = os.environ['JIRA_URL']
        jira_auth = os.environ['JIRA_AUTH']

        status_color = {
            'Open': 'green',
	    'In Progress': 'skyblue',
	    'Resolved': 'purple',
	    'Closed': 'purple',
	    '배포완료': 'purple',
        }

        buf = cStringIO.StringIO()
        c = pycurl.Curl()
        c.setopt(c.URL, "{0}/{1}".format(jira_url,branch_key))
        c.setopt(c.HTTPHEADER, ["Authorization:Basic {0}".format(jira_auth)])
        c.setopt(c.WRITEFUNCTION, buf.write)
        c.perform()
        body = buf.getvalue()
        buf.close()

        issue_dict = json.loads(body)
        fields = issue_dict.get('fields') or ''

        if (fields):
            issue_name = fields.get('summary').encode('utf-8')
            issue_status_color = status_color.get(fields.get('status').get('name').encode('utf-8'),'skyblue')
            issue_status = bcolors.set_ansi_color("[{0}]".format(fields.get('status').get('name').encode('utf-8')),issue_status_color)
            return "{0} {1}".format(issue_status,issue_name)
    except ValueError as e:
        return ''
    except Exception as e:
        print e
        return ''

def main():
    jira_cache = {}
    branch_opt = ''
    do_flush = False

    if len(sys.argv) > 1:
        if sys.argv[1].find('a') > 0:
            branch_opt = "--all"

        if sys.argv[1].find('f') > 0:
            do_flush = True

        if sys.argv[1].find('h') > 0:
            raise Exception('Show Help')

    # get jira cache
    try:
        f = open(os.environ['JIRA_CACHE_FILE'],'r')
        jira_cache = json.loads(f.readline())
        f.close
    except:
        jira_cache = {}

    # get git branch output
    (out, error) = subprocess.Popen("git branch -v {0}".format(branch_opt), stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True).communicate()

    # loop branch list
    for b in out.rstrip().split('\n'):
        is_current_branch = b[:2].strip()
        branch_infos = b[2:].split()
        branch_name = branch_infos[0]
        branch_head = branch_infos[1]
        branch_comment = ' '.join(branch_infos[2:])
        branch_key = branch_name.split('/').pop()

        if do_flush == False and jira_cache.get(branch_key):
            jira_issue_name = jira_cache.get(branch_key).encode('utf-8')
        else:
            jira_issue_name = get_jira_issue(branch_key)
            if jira_issue_name:
                jira_cache[branch_key] = jira_issue_name
            else:
                jira_issue_name = branch_comment

        if is_current_branch == '*':
            branch_name = bcolors.set_ansi_color(branch_name,'green')
        else:
            branch_name = bcolors.set_ansi_color(branch_name,'red')

        branch_head = bcolors.set_ansi_color(branch_head,'yellow')

        if branch_opt:
            print "%2s %-40s %-18s %s" % ( is_current_branch, branch_name, branch_head, jira_issue_name)
        else:
            print "%2s %-31s %-18s %s" % ( is_current_branch, branch_name, branch_head, jira_issue_name)

    # save jira cache
    try:
        f = open(os.environ['JIRA_CACHE_FILE'],'w')
        f.write(json.dumps(jira_cache))
        f.close
    except:
        print "json save error"

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print ""
        print "usage:\t{0} [-afh]".format(sys.argv[0])
        print ""
        print "\t-a: \t all branch (include remote branch)"
        print "\t-f: \t flush issue_name"
        print "\t-h: \t show help"
        print ""
        print "\tGet authorization key:"
        print "\t\techo -n \"user_id:password\" | openssl enc -base64"
        print ""
        print "\tEdit bashrc file:"
        print "\t\texport JIRA_URL='http://jira.daumkakao.com/rest/api2/issue'"
        print "\t\texport JIRA_AUTH='base64encodedstring'"
        print ""
        print "\t\t[windows]"
        print "\t\texport JIRA_CACHE_FILE=\"/c/Users/$USERNAME/.gitjira\""
        print ""
        print "\t\t[linux]"
        print "\t\texport JIRA_CACHE_FILE=\"/Users/$USERNAME/.gitjira\""
        print "\tStatus:"
        print "\t\t{0}".format(e)
